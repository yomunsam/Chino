<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllowAccessTokensViaBrowser" xml:space="preserve">
    <value>允许通过浏览器访问Token</value>
  </data>
  <data name="AllowedCorsOrigins" xml:space="preserve">
    <value>允许跨域来源</value>
  </data>
  <data name="AllowedGrantTypes" xml:space="preserve">
    <value>允许的授权类型</value>
  </data>
  <data name="AllowedScopes" xml:space="preserve">
    <value>允许的Scopes</value>
  </data>
  <data name="AllowOfflineAccess" xml:space="preserve">
    <value>允许离线访问</value>
  </data>
  <data name="AllowPlainTextPkce" xml:space="preserve">
    <value>允许纯文本Pkce</value>
  </data>
  <data name="BackChannelLogoutSessionRequired" xml:space="preserve">
    <value>需要前端通道注销会话</value>
  </data>
  <data name="BackChannelLogoutUri" xml:space="preserve">
    <value>后端通道登出URI</value>
  </data>
  <data name="btn_AllowedCorsOrigins" xml:space="preserve">
    <value>管理允许的跨域来源</value>
  </data>
  <data name="btn_AllowedGrantTypes" xml:space="preserve">
    <value>管理允许的授权类型</value>
  </data>
  <data name="btn_AllowedScopes" xml:space="preserve">
    <value>管理允许的作用域</value>
  </data>
  <data name="btn_del" xml:space="preserve">
    <value>删除客户端</value>
  </data>
  <data name="btn_RedirectUris" xml:space="preserve">
    <value>管理重定向URI</value>
  </data>
  <data name="btn_save" xml:space="preserve">
    <value>保存客户端</value>
  </data>
  <data name="card-header-allowedScopes" xml:space="preserve">
    <value>允许的作用域</value>
  </data>
  <data name="card_header_client_authentication_area" xml:space="preserve">
    <value>授权和登出</value>
  </data>
  <data name="card_header_client_names" xml:space="preserve">
    <value>客户端名称</value>
  </data>
  <data name="Description" xml:space="preserve">
    <value>描述</value>
  </data>
  <data name="Enabled" xml:space="preserve">
    <value>启用</value>
  </data>
  <data name="EnableLocalLogin" xml:space="preserve">
    <value>启用本地登录</value>
  </data>
  <data name="form-client-id" xml:space="preserve">
    <value>客户端ID标识</value>
  </data>
  <data name="form-client-name" xml:space="preserve">
    <value>客户端名称</value>
  </data>
  <data name="FrontChannelLogoutSessionRequired" xml:space="preserve">
    <value>需要前端通道登出会话</value>
  </data>
  <data name="FrontChannelLogoutUri" xml:space="preserve">
    <value>前端通道登出URI</value>
  </data>
  <data name="RedirectUris" xml:space="preserve">
    <value>重定向URI</value>
  </data>
  <data name="RequireClientSecret" xml:space="preserve">
    <value>需要客户端密钥</value>
  </data>
  <data name="RequirePkce" xml:space="preserve">
    <value>需要Pkce</value>
  </data>
  <data name="tab-authentication" xml:space="preserve">
    <value>授权和登出</value>
  </data>
  <data name="tab-basics" xml:space="preserve">
    <value>基础</value>
  </data>
  <data name="tab-name" xml:space="preserve">
    <value>名称</value>
  </data>
  <data name="tips_AllowAccessTokensViaBrowser" xml:space="preserve">
    <value>指定是否允许此客户端通过浏览器接收访问令牌 access_token。 这对于强化允许多种响应类型的流是有用的（例如，通过禁止应该使用代码身份令牌 id_token 的混合流客户端来添加令牌响应类型并因此将令牌泄漏到浏览器。）</value>
  </data>
  <data name="tips_AllowedCorsOrigins" xml:space="preserve">
    <value>指定客户端允许的跨域来源</value>
  </data>
  <data name="tips_AllowedScopes" xml:space="preserve">
    <value>管理允许的Scopes</value>
  </data>
  <data name="tips_AllowOfflineAccess" xml:space="preserve">
    <value>决定客户端是否可以请求offline_access作用域来请求 refresh_token</value>
  </data>
  <data name="tips_AllowPlainTextPkce" xml:space="preserve">
    <value>默认为false，不推荐</value>
  </data>
  <data name="tips_Enable" xml:space="preserve">
    <value>是否启用该客户端，默认启用</value>
  </data>
  <data name="tips_FrontChannelLogoutSessionRequired" xml:space="preserve">
    <value>指定是否应将用户的会话标识发送到 FrontChannelLogoutUri。 默认为 true。</value>
  </data>
  <data name="tips_FrontChannelLogoutUri" xml:space="preserve">
    <value>详情参考文档，通知客户端用于已注销用的</value>
  </data>
  <data name="tips_RequireClientSecret" xml:space="preserve">
    <value>指定该客户端是否需要传递Secret才能从Token端点请求Token（默认为true）</value>
  </data>
  <data name="tips_RequirePkce" xml:space="preserve">
    <value>请自行搜索学习Pkce是个啥，是授权码流程用的，三言两语说不清楚</value>
  </data>
  <data name="UserSsoLifetime" xml:space="preserve">
    <value>用户SSO生命周期</value>
  </data>
</root>